export namespace Types {
  export type ledger_key = nat;
  export type ledger = big_map<nat, address>;
  export type assets = big_map<[address, nat], nat>;
  export type admin = [address, key];

  export type operators = big_map<[address, address], set<nat>>;
  
  export type policy_info_mint = {
    asset_contract_address: address,
    asset_token_id: nat,
    policy: bytes,
    signature: signature
  };

  export type policy_info_update = {
    policy_id: nat,
    policy: bytes,
    signature: signature
  };

  export type token_metadata = {
    token_id: nat,
    token_info: map<string, bytes>
  };

  export type store = {
    admin: {
      address: address,
      verifier: key,
      paused: bool,
    },
    ledger_counter: nat,
    ledger: ledger,
    assets: assets,
    pricing: big_map<nat, [tez, bool]>,
    token_metadata: big_map<nat, token_metadata>,
    operators: operators,
    metadata: big_map<string, bytes>,
  };

  export type message = {
    timestamp: timestamp,
    policy_contract_address: address,
    asset_contract_address: address,
    asset_token_id: nat,
    policy: bytes,
    pricing_id: nat,
  };
};

export namespace Utils {
  const register_policy = (params: Types.policy_info_mint, store: Types.store) => {
    const ledger_counter = store.ledger_counter + (1 as nat);
    const ledger_map = Big_map.add(ledger_counter, store.admin.address, store.ledger);
    const metadata = { 
      token_id: ledger_counter,
      token_info: Map.literal(
        list([
          ["policy" as string, params.policy],
          ["signature" as string, Bytes.pack(params.signature)]
        ])
      );
    };
    const token_metadata_map = Big_map.add(ledger_counter, metadata, store.token_metadata);
    const assets_map = Big_map.add([params.asset_contract_address, params.asset_token_id], ledger_counter, store.assets);

    return {
      ...store,
      ledger: ledger_map,
      ledger_counter,
      assets: assets_map,
      token_metadata: token_metadata_map,
    };
  };

  const update_policy = (params: Types.policy_info_update, store: Types.store) => {
    return {
      ...store,
      token_metadata: Big_map.update(params.policy_id, Some({
        token_id: params.policy_id,
        token_info: Map.literal(
          list([
            ["policy" as string, params.policy],
            ["signature" as string, Bytes.pack(params.signature)]
          ])
        )}
      ), store.token_metadata),
    }
  };

  const find_policy_id = (assets: big_map<[address, nat], nat>, asset_contract_address: address, asset_token_id: nat) => match(Big_map.find_opt([asset_contract_address, asset_token_id], assets), {
    Some: (x) => x,
    None: () => { failwith("Policy not found"); }
  });
};
