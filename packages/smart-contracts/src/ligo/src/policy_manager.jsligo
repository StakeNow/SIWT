/*
 * Copyright (C) 2022, vDL Digital Ventures GmbH <info@vdl.digital>
 *
 * SPDX-License-Identifier: MIT
 */

#import "conditions.jsligo" "Conditions"
#import "storage.jsligo" "Storage"
#import "utils/utils.jsligo" "Utils"
#import "common/errors.jsligo" "Errors"
#import "core/storage.jsligo" "FA2_Storage"
#import "core/balance_of.jsligo" "FA2_BalanceOf"
#import "core/update_operators.jsligo" "FA2_UpdateOperators"
#import "core/transfer.jsligo" "FA2_Transfer"

type policy_params = {
  message: bytes,
  signature: signature,
};

type pricing = map<nat, tez>;
type token_metadata = map<string, bytes>;

type action = 
 | ["Mint", policy_params]
 | ["Update", policy_params]
 | ["Set_administrator", address]
 | ["Set_paused", bool]
 | ["Update_pricing_model", [nat, tez, bool]]
 | ["Payout", tez]
 | ["Update_operators", FA2_UpdateOperators.Types.update_operators]
 | ["Balance_of", FA2_BalanceOf.Types.balance_of]
 | ["Transfer", FA2_Transfer.Types.transfer];

type @return = [list<operation>, Storage.Types.store];

const payout = (store: Storage.Types.store, amount: tez): @return => {
  const admin_address = Utils.get_admin(store);
  Conditions.must_be_admin(admin_address);
  Conditions.must_have_enough_balance(amount);

  const receiver : contract<unit> = match (((Tezos.get_contract_opt (admin_address)) as option<contract<unit>>), {
    Some: (contract : contract<unit>) => contract,
    None: () => failwith (Errors.invalid_contract) as contract<unit>
  });

  const op : operation = Tezos.transaction (unit, amount, receiver);
  const operations : list<operation> = list([op]);

  return [operations, store];
};

const mint = (store: Storage.Types.store, params: policy_params): @return => {
  Conditions.contract_must_be_active(store.admin.paused);
  Conditions.signature_must_be_valid(store.admin.verifier, params.signature, params.message);
  Conditions.message_must_be_valid(params.message);
  const message: Storage.Types.message = Utils.deconstruct_message(params.message);
  Conditions.must_be_for_this_contract(message.policy_contract_address);
  const [price, isValid] = Utils.get_policy_price(store, message.pricing_id);
  Conditions.pricing_must_be_active(isValid);
  Conditions.amount_must_be_pricing_value(Tezos.get_amount(), price);
  Conditions.request_must_not_be_expired(message.timestamp);
  Conditions.asset_must_not_exist(store.assets, [message.asset_contract_address, message.asset_token_id]);
  
  return [
    list([]),
    Storage.Utils.register_policy({
      asset_contract_address: message.asset_contract_address,
      asset_token_id: message.asset_token_id,
      policy: bytes ` ` as bytes,
      signature: params.signature
    }, store)
  ];
};

const update = (store: Storage.Types.store, params: policy_params): @return => {
  Conditions.contract_must_be_active(store.admin.paused);
  Conditions.signature_must_be_valid(store.admin.verifier, params.signature, params.message);
  const message: Storage.Types.message = Utils.deconstruct_message(params.message);
  Conditions.message_must_be_valid(params.message);
  Conditions.must_be_for_this_contract(message.policy_contract_address);
  const [price, isValid] = Utils.get_policy_price(store, message.pricing_id);
  Conditions.pricing_must_be_active(isValid);
  Conditions.amount_must_be_pricing_value(Tezos.get_amount(), price);
  Conditions.request_must_not_be_expired(message.timestamp);
  const policy_id = Storage.Utils.find_policy_id(store.assets, message.asset_contract_address, message.asset_token_id);
  Conditions.policy_must_exist(store.ledger, policy_id);

  return [
    list([]),
    Storage.Utils.update_policy({
      policy_id,
      policy: message.policy,
      signature: params.signature
    }, store)
  ];
};

const set_administrator = (store: Storage.Types.store, address: address): @return => {
  Conditions.must_be_admin(Utils.get_admin(store));

  const new_admin : contract<unit> = match (((Tezos.get_contract_opt (address)) as option<contract<unit>>), {
    Some: (contract : contract<unit>) => contract,
    None: () => failwith (Errors.invalid_contract) as contract<unit>
  });

  return [list([]), {
    ...store,
    admin: {
      ...store.admin,
      address: Tezos.address(new_admin) as address,
    }
  }];
};

const set_paused = (store: Storage.Types.store, paused: bool): @return => {
  Conditions.must_be_admin(Utils.get_admin(store));
  return [list([]), {
    ...store,
    admin: {
      ...store.admin,
      paused
    }
  }];
};

const update_pricing = (store: Storage.Types.store, [price_id, value, isValid]: [nat, tez, bool]): @return => {
  Conditions.must_be_admin(Utils.get_admin(store));
  
  const new_pricing = Big_map.mem(price_id, store.pricing)
    ? Big_map.update(price_id, Some([value, isValid]), store.pricing)
    : Big_map.add(price_id, [value, isValid], store.pricing);
  
  return [list([]), {
    ...store,
    pricing: new_pricing,
  }];
};

const main = (action: action, store: Storage.Types.store) : @return => 
  match(action, {
    Mint: (p: policy_params) => mint(store, p),
    Update: (params: policy_params) => update(store, params),
    Set_administrator: (admin) => set_administrator(store, admin),
    Set_paused: (paused: bool) => set_paused(store, paused),
    Update_pricing_model: ([price_id, value, isValid]: [nat, tez, bool]) => update_pricing(store, [price_id, value, isValid]),
    Payout: (amount: tez) => payout(store, amount),
    Update_operators: (params: FA2_UpdateOperators.Types.update_operators) => FA2_UpdateOperators.update_ops([params, store]),
    Balance_of: (params: FA2_BalanceOf.Types.balance_of) => FA2_BalanceOf.balance_of([params, store]),
    Transfer: (params: FA2_Transfer.Types.transfer) => FA2_Transfer.transfer([params, store])
  });

// @view
const get_balance = ([p, store]: [[address , nat], Storage.Types.store]): nat => {
  const [owner, token_id] = p;

  return FA2_Storage.get_balance([store, owner, token_id]);
};
