#import "./balance_of.jsligo" "BalanceOf"
#import "./mint.jsligo" "Mint"

const bob = "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address;
const alice = "tz1cQ1mkH1PiCxLUkbWH7SkGj8PrYpffzWxo" as address;

const storage_mock_fa2 = {
  ledger: Big_map.literal(
    list([
      [([bob, 0 as nat]), 1 as nat],
      [([alice, 1 as nat]), 1 as nat]
    ])
  );
};

const storage_mock_policy = {
  ledger: 0 as nat,
  contract: alice,
  token_id: 0 as nat,
}

const _originate_fa2_contract = () : bool => {
  const balance_of_mock = storage_mock_fa2;
  const [address_fa2, _, _] = Test.originate(BalanceOf.main, balance_of_mock, 0 as tez);
  Test.log(["FA2 contract address", address_fa2]);
  const stor =  Test.get_storage(address_fa2);
  Test.log(["Storage", stor]);

  return (Test.get_storage(address_fa2) == balance_of_mock);
};

// const test_originate_fa2_contract = _originate_fa2_contract();

const _balance_of_fa2_contract = () : bool => {
  const balance_of_mock = storage_mock_fa2;
  const [address_fa2, _, _] = Test.originate(BalanceOf.main, balance_of_mock, 0 as tez);
  // const contr = Test.to_contract(address_fa2);
  // const entrypoint = Test.to_entrypoint("%balance_of", address_fa2);
  // Test.log(["Entrypoint", entrypoint]);
  // const request = {
  //   owner: bob,
  //   token_id: 0 as nat
  // };

  // const balance_of_params = {
  //   requests: list([request]),
  //   callback: entrypoint
  // }

  // const balance_of_operation = Test.transfer_to_contract_exn(contr, (Balance_of(balance_of_params)), 0 as tez);
  // Test.log(["balance of", balance_of_operation]);

  Test.log(["FA2 contract address", address_fa2]);
  const stor =  Test.get_storage(address_fa2);
  Test.log(["Storage", stor]);

  return (Test.get_storage(address_fa2) == balance_of_mock);
};

const test_balance_of_fa2_contract = _balance_of_fa2_contract();

const _originate_policy_contract = () : bool => {
  const [address_policy, _, _] = Test.originate(Mint.main, storage_mock_policy, 0 as tez);
  // Test.log(["Policy contract address", address_policy]);
  const contr = Test.to_contract(address_policy);
  const mint_operation = Test.transfer_to_contract_exn(contr, (Mint()), 0 as tez);
  Test.log(["Policy - Mint", mint_operation]);
  const stor =  Test.get_storage(address_policy);
  Test.log(["Policy - Storage", stor]);

  return (Test.get_storage(address_policy) == storage_mock_policy);
}
// const test_originate_contract = _originate_policy_contract();

const _mint_check = (): bool => {
  // Originate FA2 contract
  const [taddress_fa2, _, _] = Test.originate(BalanceOf.main, storage_mock_fa2, 0 as tez);
  const contract_fa2 = Test.to_contract(taddress_fa2);
  const address_fa2 = Tezos.address(contract_fa2);

  // Originate Policy contract
  const [taddress_policy, _, _] = Test.originate(Mint.main, storage_mock_policy, 0 as tez);
  const contract_policy = Test.to_contract(taddress_policy);
  const address_policy = Tezos.address(contract_policy);

  Test.log(["FA2 contract address", address_fa2]);
  Test.log(["Policy contract address", address_policy]);

  const storage_fa2 =  Test.get_storage(taddress_fa2);
  const request = {
    owner: "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address,
    token_id: 0 as nat
  };
  const account_balance: nat = match(Big_map.find_opt([request.owner, request.token_id], storage_fa2.ledger), {
    Some: (x) => x,
    None: () => 0 as nat
  });
  const response = {
    request: request,
    balance: account_balance
  };

  Test.log(["test", list([response])]);

  // MintCheck on Policy contract with address of FA2 contract
  // Test.originate_from_file_and_mutate_all();
  const _mint_params = {
    contract: address_fa2,
    token_id: 1 as nat
  };
  Test.log(["mint_params", _mint_params]);
  // const mint_operation = Test.transfer_to_contract_exn(contract_policy, (MintCheck(_mint_params)), 0 as tez);
  const mint_operation = Test.transfer_to_contract_exn(contract_policy, (MintCheck(_mint_params)), 0 as tez);
  Test.log(["Policy - MintCheck", mint_operation]);


  const stor =  Test.get_storage(taddress_policy);
  Test.log(["Policy - Storage", stor]);

  return (stor == storage_mock_policy);
};
const mint_check = _mint_check();


/*
const _callback_check = (): bool => {
  // Originate FA2 contract
  const [taddress_fa2, _, _] = Test.originate(BalanceOf.main, storage_mock_fa2, 0 as tez);
  const contract_fa2 = Test.to_contract(taddress_fa2);
  const address_fa2 = Tezos.address(contract_fa2);
};
// const callback_check = _callback_check();
*/