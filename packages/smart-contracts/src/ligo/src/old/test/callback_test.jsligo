#import "./balance_of.jsligo" "BalanceOf"
// #import "./mint.jsligo" "Mint"
#import "./callback.jsligo" "Callback"

const bob = "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address;
const alice = "tz1cQ1mkH1PiCxLUkbWH7SkGj8PrYpffzWxo" as address;
const ursula = "tz1eGd1Gzh9cpZjW1hpzre2fLSnMAsXqRdJy" as address;

const initial_callback_storage = list([0 as nat]);
const initial_storage = {
  ledger: Big_map.literal(
    list([
      [([bob, 0 as nat]), 1 as nat],
      [([alice, 1 as nat]), 1 as nat]
    ])
  );
};

const _balance_of_fa2_contract = () : bool => {
  const [callback_addr, _, _] = Test.originate(Callback.main, initial_callback_storage, 0 as tez);
  const callback_contract = Test.to_contract(callback_addr);
  // const callback_entrypoint = Test.to_entrypoint("Callback", callback_addr);
  // Test.log(["Main", callback_contract]);

  // const [callback_addr, _, _] = Test.originate(Callback.main, initial_callback_storage, 0 as tez);
  // Test.log(["callback_entrypoint", callback_entrypoint]);

  const balance_of_requests = {
    requests: list([
      {
        owner: bob, //ursula,
        token_id: 0 as nat
      }
    ]),
    callback: callback_contract
  };

  const [t_addr, _, _] = Test.originate(BalanceOf.main, initial_storage, 0 as tez);
  let contr = Test.to_contract(t_addr);
  let test = Test.transfer_to_contract_exn(contr, (Balance_of(balance_of_requests)), 0 as tez);
  Test.log(["_", test]);

  let callback_storage = Test.get_storage(callback_addr);
  Test.log(["CS", callback_storage]);

  return (callback_storage == list([1 as nat]));

  // const balance_of_mock = storage_mock_fa2;
  // const [address_fa2, _, _] = Test.originate(BalanceOf.main, balance_of_mock, 0 as tez);
  // const [address_fa2, _, _] = Test.originate(BalanceOf.main, balance_of_mock, 0 as tez);
  // const contr = Test.to_contract(address_fa2);
  // const entrypoint = Test.to_entrypoint("%balance_of", address_fa2);
  // Test.log(["Entrypoint", entrypoint]);
  // const request = {
  //   owner: bob,
  //   token_id: 0 as nat
  // };

  // const balance_of_params = {
  //   requests: list([request]),
  //   callback: entrypoint
  // }

  // const balance_of_operation = Test.transfer_to_contract_exn(contr, (Balance_of(balance_of_params)), 0 as tez);
  // Test.log(["balance of", balance_of_operation]);

  // Test.log(["FA2 contract address", address_fa2]);
  // const stor =  Test.get_storage(address_fa2);
  // Test.log(["Storage", stor]);

  // return (Test.get_storage(address_fa2) == balance_of_mock);
};

const test_balance_of_fa2_contract = _balance_of_fa2_contract();