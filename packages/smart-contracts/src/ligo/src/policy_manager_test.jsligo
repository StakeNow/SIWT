#include "./policy_manager.jsligo"
#include "./test_utils/test_utils.jsligo"
#import "./storage.jsligo" "Storage"
#import "./common/errors.jsligo" "Errors"
#import "./old/test/balance_of.jsligo" "BalanceOf"

const bob = "tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address;
const alice = "tz1cQ1mkH1PiCxLUkbWH7SkGj8PrYpffzWxo" as address;
const ursula = "tz1eGd1Gzh9cpZjW1hpzre2fLSnMAsXqRdJy" as address;
const token_contract_1 = "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton" as address;
const token_contract_2 = "KT1AFA2mwNUMNd4SsujE1YYp29vd8BZejyKW" as address;
const public_key = "edpktom5rsehpEY6Kp2NShwsnpaaEjWxKFMJ3Rjp99VMJuHS93wxD6" as key;
const public_key_2 = "edpkusHqa6fxkGPPL9YpgbcakvSTvcTBcwnLAmCdcevmws4Mh2MdHB" as key;

const store_mock = {
  admin: {
    address: bob,
    verifier: public_key,
    paused: false,
  },
  ledger_counter: 0 as nat,
  ledger: (Big_map.empty as big_map<nat, address>),
  assets: (Big_map.empty as big_map<[address, nat], nat>),
  pricing: Map.empty as map<nat, [tez, bool]>,
  token_metadata: Big_map.empty as big_map<nat, Storage.Types.token_metadata>,
  operators: Big_map.empty as big_map<[address, address], set<nat>>,
};

const init_test = () : unit => {
  Test.reset_state(2 as nat, list([4000000 as tez]));
};

const _originate_contract = () : unit => {
  const initial_storage = store_mock;
  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  assert(Test.to_json(Test.get_storage(taddr)) == Test.to_json(initial_storage));
};
const test_originate_contract = _originate_contract();

type mint_function_request = {
    amount: tez
};

const _mint = (secret_key, request: mint_function_request, result: nat) : unit => {
  // Policy
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([[
      1 as nat, [1000000 as mutez, true as bool]
    ]])),
  };
  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  const contract = Test.to_contract(taddr);

  const message_data = Bytes.pack({
    timestamp: Tezos.get_now(),
    policy_contract_address: contract,
    asset_contract_address: token_contract_1,
    asset_token_id: 0 as nat,
    policy: bytes ` `,
    policy_id: 1 as nat,
  });

  const message_prefix = bytes(192) as bytes;
  const message = Bytes.concat(message_prefix, message_data);
  const signature = Test.sign(secret_key, message);

  const _status: test_exec_result = Test.transfer_to_contract(contract, (Mint({ message, signature })), request.amount as tez);
  const new_storage = Test.get_storage(taddr);

  Test.assert_with_error(new_storage.ledger_counter == result, "Ledger counter is incorrect");
};

const _mint_success = () : unit => {
  const [_address, _public_key, secretkey] = Test.get_bootstrap_account(1 as nat);
  const request = {
    amount: 0 as mutez
  };
  const ledger_size_result = 1 as nat;

  _mint(secretkey, request, ledger_size_result);
};
const test_mint_success = _mint_success();

const _mint_failwith_incorrect_signature = () : unit => {
  const [_address, _public_key, secretkey] = Test.get_bootstrap_account(0 as nat);
  const request = {
    amount: 1000000 as mutez
  };
  const ledger_size_result = 0 as nat;

  _mint(secretkey, request, ledger_size_result);
};
const test_mint_failwith_incorrect_signature = _mint_failwith_incorrect_signature();

const _update_policy_success = () : unit => {
  init_test();
  const [address, _public_key, secret_key] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ])),
    ledger: Big_map.literal(list([
      [1 as nat, bob]
    ])),
    token_metadata: Big_map.literal(list([
      [
        1 as nat,
        {
          token_id: 1 as nat,
          token_info: Map.literal(
          list([
            ["policy" as string, bytes `POLICY`],
            ["signature" as string, bytes `SIGNATURE`]
          ]))
        }
      ]
    ])),
    assets: Big_map.literal(list([
      [([token_contract_1, 0 as nat]), 1 as nat]
    ])),
  };
 
  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contract = Test.to_contract(taddr);
  
  const message_data = Bytes.pack({
    timestamp: Tezos.get_now(),
    policy_contract_address: contract,
    asset_contract_address: token_contract_1,
    asset_token_id: 0 as nat,
    policy: bytes `POLICY`,
    pricing_id: 1 as nat,
  });

  const message_prefix = bytes(192) as bytes;
  const message = Bytes.concat(message_prefix, message_data);
  const signature = Test.sign(secret_key, message);

  let _tx = Test.transfer_to_contract(contract, (Update ({
    message: message,
    signature,
  })), 1000000 as mutez);
  const new_storage = Test.get_storage(taddr);
  const new_policy_token = Option.unopt(Big_map.find_opt(1 as nat, new_storage.token_metadata));
  const new_policy = Option.unopt(Map.find_opt("policy" as string, new_policy_token.token_info));
  const new_policy_signature = Option.unopt(Map.find_opt("signature" as string, new_policy_token.token_info));

  Test.assert_with_error(new_policy == bytes `POLICY`, "Policy not updated");
  Test.assert_with_error(new_policy_signature == Bytes.pack(signature), "Signature not updated");
}
const test_update_policy = _update_policy_success();

const _update_policy_failed_with_invalid_signature = () : unit => {
  init_test();
  const [address, _public_key, secret_key] = Test.get_bootstrap_account(0 as nat);
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ])),
    ledger: Big_map.literal(list([
      [1 as nat, bob]
    ])),
    token_metadata: Big_map.literal(list([
      [
        1 as nat,
        {
          token_id: 1 as nat,
          token_info: Map.literal(
          list([
            ["policy" as string, bytes `POLICY`],
            ["signature" as string, bytes `SIGNATURE`]
          ]))
        }
      ]
    ])),
    assets: Big_map.literal(list([
      [([token_contract_1, 0 as nat]), 1 as nat]
    ])),
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contract = Test.to_contract(taddr);
  
  const message_data = Bytes.pack({
    timestamp: Tezos.get_now(),
    policy_contract_address: contract,
    asset_contract_address: token_contract_1,
    asset_token_id: 0 as nat,
    policy: bytes `POLICY`,
    pricing_id: 1 as nat,
  });

  const message_prefix = bytes(192) as bytes;
  const message = Bytes.concat(message_prefix, message_data);
  const signature = Test.sign(secret_key, message);

  Test.set_source(address);
  let tx = Test.transfer_to_contract(contract, (Update ({
    message: message,
    signature,
  })), 1000000 as mutez);

  assert_error(tx, Errors.invalid_signature);
}
const test_update_policy_failed_with_invalid_signature = _update_policy_failed_with_invalid_signature();

const _update_policy_failed_with_token_not_found = () : unit => {
  init_test();
  const [address, _public_key, secret_key] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ])),
    ledger: Big_map.literal(list([
      [1 as nat, bob]
    ])),
    token_metadata: Big_map.literal(list([
      [
        1 as nat,
        {
          token_id: 1 as nat,
          token_info: Map.literal(
          list([
            ["policy" as string, bytes `POLICY`],
            ["signature" as string, bytes `SIGNATURE`]
          ]))
        }
      ]
    ])),
    assets: Big_map.literal(list([
      [([token_contract_1, 0 as nat]), 1 as nat]
    ])),
  };
 
  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contract = Test.to_contract(taddr);

  const message_data = Bytes.pack({
    timestamp: Tezos.get_now(),
    policy_contract_address: contract,
    asset_contract_address: token_contract_1,
    asset_token_id: 0 as nat,
    policy: bytes `POLICY`,
    pricing_id: 1 as nat,
  });

  const message_prefix = bytes(192) as bytes;
  const message = Bytes.concat(message_prefix, message_data);
  const signature = Test.sign(secret_key, message);

  Test.set_source(address);
  let tx = Test.transfer_to_contract(contract, (Update ({
    message,
    signature,
  })), 1000000 as mutez);

  assert_error(tx, Errors.token_not_found);
}
const test_update_policy_failed_with_token_not_found = _update_policy_failed_with_token_not_found();

const _update_policy_failed_with_incorrect_amount = () : unit => {
  init_test();
  const [address, _public_key, secret_key] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ])),
    ledger: Big_map.literal(list([
      [1 as nat, bob]
    ])),
    token_metadata: Big_map.literal(list([
      [
        1 as nat,
        {
          token_id: 1 as nat,
          token_info: Map.literal(
          list([
            ["policy" as string, bytes `POLICY`],
            ["signature" as string, bytes `SIGNATURE`]
          ]))
        }
      ]
    ])),
    assets: Big_map.literal(list([
      [([token_contract_1, 0 as nat]), 1 as nat]
    ])),
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contract = Test.to_contract(taddr);
  Test.set_source(address);

  const message_data = Bytes.pack({
    timestamp: Tezos.get_now(),
    policy_contract_address: contract,
    asset_contract_address: token_contract_1,
    asset_token_id: 0 as nat,
    policy: bytes `POLICY`,
    pricing_id: 1 as nat,
  });

  const message_prefix = bytes(192) as bytes;
  const message = Bytes.concat(message_prefix, message_data);
  const signature = Test.sign(secret_key, message);

  let tx = Test.transfer_to_contract(contract, (Update ({
    message,
    signature,
  })), 100000 as mutez);

  assert_error(tx, Errors.amount_must_be_subscription_value);
}
const test_update_policy_failed_with_incorrect_amount = _update_policy_failed_with_incorrect_amount();

const _set_administrator_success = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address, 
    }
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let _tx = Test.transfer_to_contract(contr, (Set_administrator (ursula)), 0 as mutez);
  let new_storage = Test.get_storage(taddr);
  Test.assert_with_error(new_storage.admin.address == ursula, "Administrator not set");
};
const test_set_administrator_success = _set_administrator_success();

const _set_administrator_failwith_not_admin = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address: bob,
    }
  };
  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let tx = Test.transfer_to_contract(contr, (Set_administrator (ursula)), 0 as mutez);
  assert_error(tx, Errors.incorrect_sender);
  const new_storage = Test.get_storage(taddr);
  assert(Test.to_json(new_storage) == Test.to_json(initial_storage));
};
const test_set_administrator_failwith_not_admin = _set_administrator_failwith_not_admin();

const _set_paused_success = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address,
    }
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let _tx = Test.transfer_to_contract(contr, (Set_paused (true)), 1 as mutez);
  let new_storage = Test.get_storage(taddr);
  Test.assert_with_error(new_storage.admin.paused == true, "Paused not set to true");
};
const test_set_paused_success = _set_paused_success();

const _set_paused_failwith_not_admin = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address: alice,
    },
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let tx = Test.transfer_to_contract(contr, (Set_paused (true)), 1 as mutez);
  assert_error(tx, Errors.incorrect_sender);
  const new_storage = Test.get_storage(taddr);
  assert(Test.to_json(new_storage) == Test.to_json(initial_storage));
};
const test_set_paused_failwith_not_admin = _set_paused_failwith_not_admin();

const _update_pricing_add_success = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address,
    },
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ]))
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as mutez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let _tx = Test.transfer_to_contract(contr, (Update_pricing_model ([2 as nat, 2000000 as mutez, true as bool])), 1 as mutez);
  let new_storage = Test.get_storage(taddr);
  Test.assert_with_error(Map.find_opt(2 as nat, new_storage.pricing) == Some([2000000 as mutez, true as bool]), "Pricing model not updated");
};

const test_update_pricing_add_success = _update_pricing_add_success();

const _update_pricing_replace_success = () : unit => {
  init_test();
  const [address, _public_key, _secret] = Test.get_bootstrap_account(1 as nat);
  const initial_storage = {
    ...store_mock,
    admin: {
      ...store_mock.admin,
      address,
    },
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ]))
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  Test.set_source(address);
  let _tx = Test.transfer_to_contract(contr, (Update_pricing_model ([1 as nat, 2000000 as mutez, true as bool])), 1 as mutez);
  let new_storage = Test.get_storage(taddr);
  Test.assert_with_error(Map.find_opt(1 as nat, new_storage.pricing) == Some([2000000 as mutez, true as bool]), "Pricing model not or incorrectly updated");
};

const test_update_pricing_replace_success = _update_pricing_replace_success();

const _update_pricing_failwith_not_admin = () : unit => {
  init_test();
  const initial_storage = {
    ...store_mock,
    pricing: Map.literal(list([
      [1 as nat, [1000000 as mutez, true as bool]]
    ]))
  };

  const [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  let tx = Test.transfer_to_contract(contr, (Update_pricing_model ([1 as nat, 20 as mutez, true as bool])), 1 as mutez);
  assert_error(tx, Errors.incorrect_sender);
  const new_storage = Test.get_storage(taddr);
  assert(Test.to_json(new_storage) == Test.to_json(initial_storage));
};

const test_update_pricing_failwith_not_admin = _update_pricing_failwith_not_admin();

const _payout_success = () : unit => {
  const [address, public_key, _secret] = Test.get_bootstrap_account(0 as nat);
  const [address2, _public_key2, _secret2] = Test.get_bootstrap_account(1 as nat);
  
  const initial_storage = {
    ...store_mock,
    admin: {
      address: address2,
      verifier: public_key,
      paused: false
    }
  };

  Test.set_source(address);
  const [taddr, _, _] = Test.originate(main, initial_storage, 1000000 as tez);
  const contr = Test.to_contract(taddr);
  Test.set_source(address2);
  const _tx = Test.transfer_to_contract_exn(contr, (Payout(1000000 as tez)), 0 as tez);
  const new_contract_balance = Test.get_balance(Tezos.address(contr));
  const _new_user_balance = Test.get_balance(address2);
  assert(new_contract_balance == (0 as tez));
};
const test_payout_success = _payout_success();

const _payout_failwith_not_admin = () : unit => {
  const [address, public_key, _secret] = Test.get_bootstrap_account(0 as nat);
  const [address2, _public_key2, _secret2] = Test.get_bootstrap_account(1 as nat);
  
  const initial_storage = {
    ...store_mock,
    admin: {
      address: address2,
      verifier: public_key,
      paused: false
    }
  };

  Test.set_source(address);
  const [taddr, _, _] = Test.originate(main, initial_storage, 1000000 as tez);
  const contr = Test.to_contract(taddr);
  const tx = Test.transfer_to_contract(contr, (Payout(1000000 as tez)), 0 as tez);
  const new_contract_balance = Test.get_balance(Tezos.address(contr));

  assert_error(tx, Errors.incorrect_sender);
  assert(new_contract_balance == (1000000 as tez));
}
const test_payout_failwith_not_admin = _payout_failwith_not_admin();

const _payout_failwith_not_enough_balance = () : unit => {
  const [address, public_key, _secret] = Test.get_bootstrap_account(0 as nat);
  const [address2, _public_key2, _secret2] = Test.get_bootstrap_account(1 as nat);
  
  const initial_storage = {
    ...store_mock,
    admin: {
      address: address2,
      verifier: public_key,
      paused: false
    }
  };

  Test.set_source(address);
  const [taddr, _, _] = Test.originate(main, initial_storage, 1000000 as tez);
  const contr = Test.to_contract(taddr);
  Test.set_source(address2);
  const tx = Test.transfer_to_contract(contr, (Payout(1000000000 as tez)), 0 as tez);
  const new_contract_balance = Test.get_balance(Tezos.address(contr));
  assert_error(tx, Errors.low_balance);
  assert(new_contract_balance == (1000000 as tez));
}
const test_payout_failwith_not_enough_balance = _payout_failwith_not_enough_balance();
