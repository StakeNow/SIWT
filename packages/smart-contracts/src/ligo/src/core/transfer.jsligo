/*
 * Copyright (C) 2022, vDL Digital Ventures GmbH <info@vdl.digital>
 *
 * SPDX-License-Identifier: MIT
 */

#import "./../storage.jsligo" "Storage"
#import "./storage.jsligo" "FA2_Storage"
#import "./operators.jsligo" "FA2_Operators"
#import "./ledger.jsligo" "FA2_Ledger"
#import "./errors.jsligo" "Errors"

export namespace Types {
  // Transfer entrypoint
  export type atomic_trans =
  // @layout:comb
  {
    to_      : address,
    token_id : nat,
    amount   : nat,
  };

  type transfer_from = {
    from_ : address,
    txs   : list<atomic_trans>,
  };

  export type transfer = list<transfer_from>;
}


const transfer = (t: Types.transfer, s: Storage.Types.store): [list<operation>, Storage.Types.store] => {
   // This function process the "txs" list. Since all transfer share the same "from_" address, we use a se
   const process_atomic_transfer = (from_ : address)
   : (p: [Storage.Types.ledger, Types.atomic_trans]) => Storage.Types.ledger => {
     return ([ledger, t]: [Storage.Types.ledger, Types.atomic_trans]) : Storage.Types.ledger => {
        const {to_,token_id,amount} = t;
        if(amount != (1 as nat)) {return failwith(Errors.wrong_amount);}
        else{
         FA2_Storage.assert_token_exist (s, token_id);
         FA2_Operators.assert_authorisation (s.operators, from_, token_id);
         const ledger = FA2_Ledger.transfer_token_from_user_to_user (ledger, token_id, from_, to_);
         return ledger;
        }
     };
   };
   const process_single_transfer = ([ledger, t]: [Storage.Types.ledger, Types.transfer_from]) : Storage.Types.ledger => {
      const {from_,txs}: Types.transfer_from = t;
      return List.fold_left (process_atomic_transfer (from_), ledger, txs);
   };
   const ledger = List.fold_left (process_single_transfer, s.ledger, t);
   const store = FA2_Storage.set_ledger (s, ledger);
   return [list ([]),store];
}
