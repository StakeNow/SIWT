/*
 * Copyright (c) 2021 Pierre-Emmanuel Wulfman, Sander Spies, Melwyn Saldanha and ligolang.
 * Copyright (C) 2022, vDL Digital Ventures GmbH <info@vdl.digital>
 *
 * SPDX-License-Identifier: MIT
 */

#import "./ledger.jsligo" "FA2_Ledger"
#import "./operators.jsligo" "FA2_Operators"
#import "./errors.jsligo" "FA2_Errors"
#import "../storage.jsligo" "Storage"

export const is_owner_of = (s: Storage.Types.store, owner: address, token_id: nat) : bool =>
  FA2_Ledger.is_owner_of (s.ledger, token_id, owner);

export const assert_token_exist = (s: Storage.Types.store, token_id: nat) : unit => {
  const _ = Option.unopt_with_error (Big_map.find_opt (token_id, s.token_metadata), FA2_Errors.undefined_token);
};

export const set_ledger = (s: Storage.Types.store, ledger: Storage.Types.ledger) : Storage.Types.store => ({...s, ledger : ledger});

export const get_operators = (s: Storage.Types.store) : Storage.Types.operators => s.operators;
export const set_operators = (s: Storage.Types.store, operators: Storage.Types.operators) : Storage.Types.store => ({...s, operators : operators});

export const get_balance = (s: Storage.Types.store, owner: address, token_id: nat) : nat => {
  assert_token_exist (s, token_id);
  if (is_owner_of (s, owner, token_id)) {
    return (1 as nat)
  } 
  else {
    return (0 as nat)
  }
};
